
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Код процедур и функций


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
	Элементы.СписокНоменклатуры.Видимость = Ложь;
	Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
	Элементы.БаллыКСписанию.Видимость = Ложь;
	Элементы.ПозицииПродажиПодбор.Пометка = Ложь;
	//Элементы.ГруппаПопулярныеПокупки.Видимость = Ложь;
	
	СоздатьДекорацииИзбранныхТоваров();
	ЗаполнитьИзбранныеТоварыКлиента();	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций


&НаКлиенте
Процедура БаллыКСписаниюПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	РассчитатьСуммуДокумента()
КонецПроцедуры



&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	КлиентПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаллыКлиентаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки,"#Заполнить_") Тогда
		СтандартнаяОбработка = Ложь;
		БаллыКСписанию = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"#Заполнить_",""));
		РассчитатьСуммуДокумента();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииПродажи

&НаКлиенте
Процедура СуммаИтогоПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	БаллыКСписанию = ПозицииПродажи.Итог("Сумма") - СуммаИтого;
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	РассчитатьСуммуДокумента()
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	//TODO: Вставить содержимое обработчика
		
	Значение = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ПараметрыПеретаскивания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	ДобавитьУникальнуюПозициюПродажи(Значение.Номенклатура,Значение.Цена,1,Значение.Цена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиНоменклатураПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	ДанныеСтроки.Цена = ЦенаНоменклатуры(ДанныеСтроки.Номенклатура);
	РассчитатьСуммуСтроки(ДанныеСтроки)
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиКоличествоПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки)
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиЦенаПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки)
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	//TODO: Вставить содержимое обработчика
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	//TODO: Вставить содержимое обработчика
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
		
	Значение = ЗначениеПеретаскиванияТовара(ДанныеСтроки);
	
	ПараметрыПеретаскивания.Значение = Значение;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//TODO: Вставить содержимое обработчика
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУникальнуюПозициюПродажи(ВыбраннаяСтрока,ДанныеСтроки.Цена,1,ДанныеСтроки.Цена);
			
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// Код процедур и функций


&НаКлиенте
Процедура ЗаписатьПродажи(Команда)
	
	НовыйДокумент = ЗаписатьПродажиНаСервере();
	
	ОповеститьОбИзменении(НовыйДокумент);
	
	ПоказатьОповещениеПользователя("Создан документ ", 
	ПолучитьНавигационнуюСсылку(НовыйДокумент),Строка(НовыйДокумент));
	
КонецПроцедуры


&НаКлиенте
Процедура Подбор(Команда)
	//TODO: Вставить содержимое обработчика
	Элементы.СписокНоменклатуры.Видимость = НЕ Элементы.СписокНоменклатуры.Видимость;
	Элементы.ПозицииПродажиПодбор.Пометка = Элементы.СписокНоменклатуры.Видимость;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	ЗаполнитьДекорациюБаллыКлиента();
	
	ЗаполнитьИзбранныеТоварыКлиента();
	
КонецПроцедуры

&НаСервере
Процедура СброситьИзбранныеТовары()
	
	Для Каждого Строка Из ПопулярныеТовары Цикл
		Строка.Активность = Ложь;
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзбранныеТоварыКлиента()
	
	СброситьИзбранныеТовары();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ПродажиОбороты.Номенклатура
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.СуммаОборот УБЫВ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДатаСеанса(),-3));
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекущаяСтрока = ПопулярныеТовары[Сч];
		ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ЗаполнитьДекорацииИзбранныхТоваров();	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДекорацииИзбранныхТоваров()
	
	Для Каждого Строка Из ПопулярныеТовары Цикл
		
		Элемент = Элементы[Строка.ИмяЭлемента];
		Элемент.Видимость = Строка.Активность;
		Элемент.Заголовок = Строка(Строка.Номенклатура);		
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюБаллыКлиента()
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда
		Элементы.БаллыКСписанию.Видимость = Ложь;
		Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.БаллыКСписанию.Видимость = Истина;
	Элементы.ДекорацияБаллыКлиента.Видимость = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БонусныеБаллыКлиентаОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллыКлиента.Остатки(, Клиент = &Клиент) КАК БонусныеБаллыКлиентаОстатки
		|	";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОстатокБаллов = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ОстатокБаллов = ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЕсли; 
	
	Если ОстатокБаллов = 0 Тогда
		Элементы.ДекорацияБаллыКлиента.Заголовок = "у "+Клиент+ " нет начисленных баллов!";
		Возврат;
	КонецЕсли;
	
	МаксимальнаДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	МаксимальныеБаллыКСписанию = Мин(ОстатокБаллов,Окр(СуммаИтого*МаксимальнаДоля/100,0));
	
	Шаблон ="Накоплено %1 баллов, можно списать %2 баллов. ";
	
	Описание = СтрШаблон(Шаблон,ОстатокБаллов,МаксимальныеБаллыКСписанию);
	
	ШаблонСсылки = "#Заполнить_%1";
	СсылкаЗаполненияБаллов = СтрШаблон(ШаблонСсылки,XMLСтрока(МаксимальныеБаллыКСписанию));
	
	ЧастиФорматированнойСтроки = Новый Массив;
	ЧастиФорматированнойСтроки.Добавить(Описание);
	ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнить.", , , ,СсылкаЗаполненияБаллов));
	
	Элементы.ДекорацияБаллыКлиента.Заголовок = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки, , , , );	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУникальнуюПозициюПродажи(Номенклатура,Цена,Количество,Сумма) 
	Фильтр = Новый Структура;
	Фильтр.Вставить("Номенклатура",Номенклатура);
	
	НайденныеСтроки = ПозицииПродажи.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Строка = ПозицииПродажи.Добавить();
	Строка.Номенклатура = Номенклатура;
	Строка.Цена = Цена;
	Строка.Количество = Количество;
	Строка.Сумма = Сумма;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Знач Номенклатура)
	
	Возврат РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура,ТекущаяДатаСеанса());
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	СуммаИтого = ПозицииПродажи.Итог("Сумма") - БаллыКСписанию;
	ЗаполнитьДекорациюБаллыКлиента();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ДанныеСтроки)
	Если (ДанныеСтроки.Цена = 0 ИЛИ ДанныеСтроки.Цена = Неопределено) 
	ИЛИ (ДанныеСтроки.Количество = 0 ИЛИ ДанныеСтроки.Количество = Неопределено) Тогда
		ДанныеСтроки.Сумма = 0;
	КонецЕсли;
	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Количество;
КонецПроцедуры

&НаСервере
Процедура СброситьЗаполнениеФормы()
	
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	ПозицииПродажи.Очистить();
	СуммаИтого = 0;
	БаллыКСписанию = 0;
	
	ЗаполнитьДекорациюБаллыКлиента();
	
	ЗаполнитьИзбранныеТоварыКлиента();	
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПродажиНаСервере()
	//TODO: Вставить содержимое обработчика
	ДокПродажаБилета = Документы.ПродажаБилета.СоздатьДокумент();
	ДокПродажаБилета.Дата = ТекущаяДатаСеанса();
	
	ДокПродажаБилета.Заполнить(Неопределено);
	
	ДокПродажаБилета.Клиент = Клиент;
	ДокПродажаБилета.ПозицииПродажи.Загрузить(ПозицииПродажи.Выгрузить());
	ДокПродажаБилета.БаллыКСписанию = БаллыКСписанию;
	ДокПродажаБилета.СуммаДокумента = СуммаИтого;//- БаллыКСписанию;
	
	Если Не ДокПродажаБилета.ПроверитьЗаполнение() Тогда
		//Возврат;
		ВызватьИсключение "Не удалось записать продажу...";
	КонецЕсли;
	
	ДокПродажаБилета.Записать(РежимЗаписиДокумента.Проведение);
	
	СброситьЗаполнениеФормы();
	
	Возврат ДокПродажаБилета.Ссылка;
	
КонецФункции

// Значение перетаскивания товара.
// 
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура -  Данные строки:
//  *Номенклатура - СправочникСсылка.Номенклатура
// 
// Возвращаемое значение:
//  Структура -  Значение перетаскивания тована:
// * Номенклатура - СправочникСсылка.Номенклатура - Выбранная пользователем номенклатура
// * Цена - Число
&НаКлиенте
Функция ЗначениеПеретаскиванияТовара(ДанныеСтроки)
	Значение = Новый Структура;
	Значение.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	Значение.Вставить("Цена", ДанныеСтроки.Цена);
	Возврат Значение
КонецФункции

&НаСервере
Процедура СоздатьДекорацииИзбранныхТоваров()
	
	//Элементы.ГруппаПопулярныеПокупки.Видимость = Ложь;
	
	КоличествоИбранныхТоваров = 3;
	Для Сч = 1 По КоличествоИбранныхТоваров Цикл
		ИмяДекорацииИзбранныхТоваров = "ДекорацияИзбранныхТоваров_" + XMLСтрока(Сч);
		Декорация = Элементы.Добавить(ИмяДекорацииИзбранныхТоваров, Тип("ДекорацияФормы"),Элементы.ГруппаПопулярныеПокупки);
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.Видимость = Ложь;
		Декорация.Гиперссылка = Истина;
		Декорация.УстановитьДействие("Нажатие","Подключаемый_ДекорацияИзбранныхТоваровНажатие" );
		
		СтрокаОписаниеДекорации = ПопулярныеТовары.Добавить();
		СтрокаОписаниеДекорации.ИмяЭлемента = ИмяДекорацииИзбранныхТоваров;
		
	КонецЦикла;
КонецПроцедуры

// Подключаемый декорация избранных товаров нажатие.
// 
// Параметры:
//  Элемент - ДекорацияФормы
&НаКлиенте
Процедура Подключаемый_ДекорацияИзбранныхТоваровНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	Фильтр = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ПопулярныеТовары.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Строка = НайденныеСтроки[0];
	
	Номенклатура = Строка.Номенклатура;
	
	ДобавитьУникальнуюПозициюПродажи(Номенклатура, ЦенаНоменклатуры(Номенклатура),1, ЦенаНоменклатуры(Номенклатура));
	
КонецПроцедуры


#КонецОбласти
