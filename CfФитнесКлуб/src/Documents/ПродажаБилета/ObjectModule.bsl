
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций
Процедура ОбработкаПроведения(Отказ,Режим)
	
	
	СвойстваНоменклатуры = СвойстваНоменклатуры(Номенклатура);
	// регистр АктивныеПосещения
	Движения.АктивныеПосещения.Записывать = Истина;
	Движение = Движения.АктивныеПосещения.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Основание = Ссылка;
	Движение.ВидУпражнения = СвойстваНоменклатуры.ВидУпражнения;
	Движение.КоличествоПосещений = СвойстваНоменклатуры.КоличествоПосещений;

	// регистр Продажи
	Движения.Продажи.Записывать = Истина;
	Движение = Движения.Продажи.Добавить();
	Движение.Период = Дата;
	Движение.Клиент = Клиент;
	Движение.ВидУпражнения = СвойстваНоменклатуры.ВидУпражнения;
	Движение.Сумма = СуммаДокумента;

	НачислитьСписатьБонусныеБаллы(Отказ);	
	
КонецПроцедуры


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	//TODO: Вставить содержимое обработчика
	
	МаксимальнаДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	Если БаллыКСписанию <> 0 Тогда
		Если БаллыКСписанию > Цена Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Баллы не должны превышать цену!";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();
		КонецЕсли;
		Если Цена <> 0 Тогда
			ДоляБаллов = БаллыКСписанию/Цена * 100;
			Если ДоляБаллов > МаксимальнаДоля Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Доля допустимых списываемых баллов больше допустимой (%1%%)",МаксимальнаДоля);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Поле = "БаллыКСписанию";
				Сообщение.Сообщить();
				//ДоляБаллов = МаксимальнаяДоля;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций
Функция СуммаПокупокКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
		|	ПродажиОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты";
	
	Запрос.УстановитьПараметр("КонецПериода",Новый Граница(МоментВремени(),ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Результат = ВыборкаДетальныеЗаписи.СуммаОборот;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура НачислитьСписатьБонусныеБаллы(Отказ)
	Движения.БонусныеБаллыКлиента.Записывать = Истина;
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда
		Возврат;
	КонецЕсли;
	СуммаПокупокКлиента = СуммаПокупокКлиента();
	
	ДоляНакапливаемыхБаллов = ДоляНакпливаемыхБаллов(СуммаПокупокКлиента);
	
	БаллыНакопления = СуммаДокумента * ДоляНакапливаемыхБаллов/100;
	Если БаллыНакопления <> 0 Тогда
		Движение = Движения.БонусныеБаллыКлиента.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыНакопления;
	КонецЕсли;	
	Если БаллыКСписанию <> 0 Тогда
		Движение = Движения.БонусныеБаллыКлиента.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыКСписанию;
	КонецЕсли;
	
	Движения.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БонусныеБаллыКлиентаОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллыКлиента.Остатки(&Период, Клиент = &Клиент) КАК БонусныеБаллыКлиентаОстатки
		|ГДЕ
		|	БонусныеБаллыКлиентаОстатки.СуммаОстаток < 0";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Период", Новый Граница(Дата,ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не хватает баллов для списания, на балансе (%1)",
		ВыборкаДетальныеЗаписи.СуммаОстаток + БаллыКСписанию);
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "БаллыКСписанию";
		Сообщение.Сообщить();
	КонецЕсли;
	
	
	
КонецПроцедуры

Функция ДоляНакпливаемыхБаллов(СуммаПокупокКлиента)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШкалаБонусонойПрограммыДиапазоны.ПроцентНакопления
		|ИЗ
		|	РегистрСведений.АктуальнаяШкалаБонуснойПрограммы.СрезПоследних(&Период,) КАК
		|		АктуальнаяШкалаБонуснойПрограммыСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ШкалаБонусонойПрограммы.Диапазоны КАК ШкалаБонусонойПрограммыДиапазоны
		|		ПО АктуальнаяШкалаБонуснойПрограммыСрезПоследних.Шкала = ШкалаБонусонойПрограммыДиапазоны.Ссылка
		|ГДЕ
		|	ШкалаБонусонойПрограммыДиапазоны.НижняяГраница <= &НижняяГраница
		|	И (ШкалаБонусонойПрограммыДиапазоны.ВерхняяГраница > &ВерхняяГраница
		|	ИЛИ ШкалаБонусонойПрограммыДиапазоны.ВерхняяГраница = 0)";
	
	Запрос.УстановитьПараметр("ВерхняяГраница", СуммаПокупокКлиента);
	Запрос.УстановитьПараметр("НижняяГраница", СуммаПокупокКлиента);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Результат = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Результат = ВыборкаДетальныеЗаписи.ПроцентНакопления;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СвойстваНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.ВидУпражнения,
	|	Номенклатура.КоличествоПосещений
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = новый Структура;
	Результат.Вставить("ВидУпражнения",Выборка.ВидУпражнения);
	Результат.Вставить("КоличествоПосещений",Выборка.КоличествоПосещений);
	Возврат Результат;
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
